networks:
  default:
    name: otel-libraries
    driver: bridge

services:
  service:
    image: otelab-service-a:latest
    container_name: service-a
    restart: unless-stopped
    ports:
      - "${SERVICE_PORT}:${SERVICE_PORT}"
    environment:
      - SERVICE_PORT
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=service-a
    depends_on:
      otelcol:
        condition: service_started
    profiles:
      - main
  service-b:
    image: otelab-service-b:latest
    container_name: service-b
    restart: unless-stopped
    ports:
      - "${SERVICE_B_PORT}:${SERVICE_B_PORT}"
    environment:
      - SERVICE_B_PORT
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=service-b
    depends_on:
      otelcol:
        condition: service_started
    profiles:
      - main

  # Telemetry Components

  jaeger:
    image: ${JAEGERTRACING_IMAGE}
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    restart: unless-stopped
    ports:
      - "${JAEGER_SERVICE_PORT}:${JAEGER_SERVICE_PORT}"
      - "${OTEL_COLLECTOR_PORT_GRPC}"
    environment:
      - METRICS_STORAGE_TYPE=prometheus
    profiles:
      - main

  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"
    profiles:
      - main

  otelcol:
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otel-col
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro,rslave
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
      - ${OTEL_COLLECTOR_CONFIG_EXTRAS}:/etc/otelcol-config-extras.yml
    ports:
      - "${OTEL_COLLECTOR_PORT_HTTP}"
      - "${OTEL_COLLECTOR_PORT_GRPC}"
      - "8888:8888"
    depends_on:
      jaeger:
        condition: service_started
    environment:
      - HOST_FILESYSTEM
      - OTEL_COLLECTOR_HOST
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP
    profiles:
      - main

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
    volumes:
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
      - ./src/prometheus/alert-rules.yaml:/etc/prometheus/alert-rules.yaml
    restart: unless-stopped
    depends_on:
      - service
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    profiles:
      - main

  loki:
    container_name: loki
    image: grafana/loki:main
    ports:
      - "3100:3100"
    volumes:
      - ./src/loki/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    profiles:
      - main
  # Testing
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6  
    profiles:
      - main
  k6:
    image: grafana/k6:latest
    container_name: k6
    ports:
      - "6565:6565"
    volumes:
      - ./src/k6/scripts/test.js:/test.js
    command: run /test.js
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
    profiles:
      - k6